version: 0.2
phases:
 install:
   commands:
     # This file configures apt to remove it's cache after installs - we want this cache, so we remove this config
     - rm -f /etc/apt/apt.conf.d/docker-clean

     # Install required packages
     - |
         set -e
         export DEBIAN_FRONTEND=noninteractive

         #Install php7.1
         apt-get update
         apt-get install -y  software-properties-common
         LC_ALL=C.UTF-8 add-apt-repository -y ppa:ondrej/php
         apt-get update

         # Install PHP 7.1.  The ondrej/php repository also contains other versions of php, try just changing the version number
         apt-get install -y php7.1\
                  php7.1-ldap \
                  php7.1-xml \
                  php7.1-xmlrpc \
                  php7.1-zip \
                  php7.1-mysql \
                  php7.1-mbstring \
                  php7.1-mcrypt \
                  php7.1-gd \
                  php7.1-readline \
                  php7.1-opcache \
                  php7.1-xdebug \
                  php7.1-dom \
                  php-xdebug \
                  php7.1-curl \
                  unzip

         #Enable xdebug - phpunit uses this for code coverage
         phpenmod xdebug

         #Install composer
         php -r "copy('https://getcomposer.org/installer', 'composer-setup.php');"
         php composer-setup.php ;
         php -r "unlink('composer-setup.php');" ;
         mv composer.phar /usr/local/bin/composer

         #Various handy node based dev tools - do you need these during your build? Comment if not.
         #npm install -g gulp
         #npm install -g grunt
         #npm install -g webpack

     # Start Mysql if you need it
     # - apt-get install -y mysql-server
     # - su mysql -s /bin/bash -c "/usr/sbin/mysqld" &


     - bash -c "$(curl -fsSL https://raw.githubusercontent.com/thii/aws-codebuild-extras/master/install)"

 build:
   commands:
     - echo Build started on `date`
     - echo Installing composer deps
     - composer install --no-progress --no-suggest

 post_build:
   commands:
     - echo Build completed on `date`

     # Create a mysql database
     # Do you need to do this? In many cases phpunit will use sqllite or similar to avoid the need for a real DB.
     # If you don't need it delete it
     # - /usr/bin/mysql  -u root -e "GRANT ALL ON *.* TO 'test'@'localhost' IDENTIFIED BY '' WITH GRANT OPTION"
     # - mysqladmin -u test create test

     # Run your tests
     - ./vendor/bin/phpunit --coverage-html coverage

     - aws s3 sync --delete  coverage/ "s3://${COVERAGE_S3_BUCKET}/coverage"

     # Deployment to the SFTP server
     - |
        set -e

        # Determine what git branch we're on, we only want to deploy master
        export CODEBUILD_GIT_BRANCH=`git symbolic-ref HEAD --short 2>/dev/null`
        if [ "$CODEBUILD_GIT_BRANCH" == "" ] ; then
          CODEBUILD_GIT_BRANCH=`git branch -a --contains HEAD | sed -n 2p | awk '{ printf $1 }'`
          export CODEBUILD_GIT_BRANCH=${CODEBUILD_GIT_BRANCH#remotes/origin/}
        fi

        echo "On branch $CODEBUILD_GIT_BRANCH"
        if  [ "$CODEBUILD_GIT_BRANCH" != 'master' ]; then
          echo "On branch $CODEBUILD_GIT_BRANCH ; not deploying as not master"
          exit 0
        fi

        # Install SSH client so we can deploy
        apt-get install -y openssh-client rsync

        # Setup the SSH key
        mkdir ~/.ssh
        chmod 700 ~/.ssh
        echo $SSH_KEY | base64 -d > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/*

        # Upload Files
        rsync -arvce "ssh -o StrictHostKeyChecking=no -p ${SFTP_PORT}"  . ${SSH_USERNAME}@${SSH_SERVER}:~/public_html/

        # Run any necessary remote commands
        ssh -o "StrictHostKeyChecking=no"  ${SSH_USERNAME}@${SSH_SERVER} -p ${SSH_PORT} 'cd public_html ; composer install --optimize-autoloader; php artisan migrate'

cache:
  paths:
    # Debian package caches, so we don't need to keep redownloading debian packages and lists:
    - /var/cache/apt/**/*
    - /var/lib/apt/lists/**/*

    # Composer cache:
    - /root/.composer/**/*

    # Node modules, if you need nodejs based tools like webpack during your build
    - /root/.npm/**/*
    - /usr/lib/node_modules/**/*